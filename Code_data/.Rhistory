return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
View(para)
para <- para[[1]]
X <- para[[1]]
c <- para[[2]]
X
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
X <- a * c.t + (1 - a) * c
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
para[[1000]]
## Data generating
t <- 100
c <- 2.5
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 100))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 2.5
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 50
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
## Data generating
t <- 100
c <- 50
X <- (runif(t) < 0.5)
k <- (2 * X - 1)  * c
V <- 1
for(i in 2:t){
V[i] <- 0.2 + 0.8 * V[i-1] + rnorm(1)
}
q <- rnorm(t)
R <- k * V + q
para <- list(X, c)
L_ratio <- function(R, x, V, c, k){
- (x[k] == 1) * (R[k] - c * V[k]) ^ 2 / 2 - (x[k] == 0) * (R[k] + c * V[k]) ^ 2 / 2
}
Gibbs <- function(para, R, V){
X <- para[[1]]
c <- para[[2]]
X.t <- (runif(t) < 0.5)
a <- sapply(1:t, L_ratio, R = R, x = X.t, V = V, c = c) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c)
a <- (a > log(runif(t)))
X <- a * X.t + (1 - a) * X
c.t <- exp(rnorm(1, 0, 10))
a <- sum(sapply(1:t, L_ratio, R = R, x = X, V = V, c = c.t) - sapply(1:t, L_ratio, R = R, x = X, V = V, c = c))
a <- (a > log(runif(1)))
c <- a * c.t + (1 - a) * c
return(list(X, c))
}
para <- list()
para[[1]] <- list((runif(t) < 0.5), 1)
for(i in 2:1000){
para[[i]] <- Gibbs(para[[i-1]], R, V)
}
plot(1:1000, sapply(1:1000, function(k){para[[k]][[2]]}))
library(parallel)
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wuhan.rda")
sapply(1:4000, function(k){para[[k]][[1]][2]})
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Shenzhen.rda")
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wenzhou.rda")
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
mean(sapply(1:4000, function(k){para[[k]][[2]][1]}))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wuhan.rda")
mean(sapply(1:4000, function(k){para[[k]][[2]][1]}))
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
para[[1]]
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Shenzhen.rda")
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
para[[1]]
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
region_mark <- 2
region_mark <- 3
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
# region_mark <- 3
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy, region){
para <- c(1, 5.1, 5)
if(region == "Wuhan"){
para <- c(1, 12.1, 5)
}
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf, 5.1))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy, region)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat, region)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
# region_mark <- 3
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy, region){
para <- c(1, 5.1, 5)
if(region == "Wuhan"){
para <- c(1, 12.1, 5)
}
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf, 5.1))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy, region)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat, region)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat, region)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat, region)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
mean(sapply(1:4000, function(k){para[[k]][[1]][2]}))
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
# path = '/Users/zhangjingwen/Desktop/冠状病毒/统计分析/The-simulations_1128_v2/'
path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen = para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou = para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan = para
Rt <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
}
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
f_alp <- function(k, alp){
alp[4] * (alp[3] / (1 + exp(2 * log(99) / alp[2] * (k - alp[1] - alp[2] / 2))) + 1 - alp[3])
}
## Plot the time-varying reproduction number
Plot_ALL <- function(shenzhen, wenzhou, wuhan) {
today.wh = as.Date("2020/01/15")
today.wz = as.Date("2020/01/21")
today.sz = as.Date("2020/01/19")
today.end = as.Date("2020/02/20")
time_lab <- format(seq.Date(from = today.wh, to =today.end, by = "day"), format = "%m/%d")
len = length(time_lab)
Rt_wh = rowMeans(Rt_Wuhan(wuhan))[1:len]
Rt_wz = c(rep(NA, 6), rowMeans(Rt(wenzhou))[1:(len-6)])
Rt_sz = c(rep(NA, 4), rowMeans(Rt(shenzhen))[1:(len-4)])
dat_plot = data.frame(time_num = 1:len, time_lab, Rt_wh, Rt_wz, Rt_sz)
names(dat_plot) <- c("time_num", 'time','wuhan', 'wenzhou', 'shenzhen')
plot_out <- dat_plot %>%
ggplot(aes(x = time_num)) +
geom_line(aes(y = wuhan, color = "Wuhan"), size = 1) +
geom_line(aes(y = wenzhou, color = "Wenzhou"), size = 1) +
geom_line(aes(y = shenzhen, color = "Shenzhen"), size = 1) +
scale_x_continuous(breaks = dat_plot$time_num[1:length(dat_plot$time_num) %% 5 == 1],
labels = dat_plot$time[1:length(dat_plot$time_num) %% 5 == 1]) +
theme_bw(base_family = "Times") +
theme(panel.grid.minor = element_blank(),
legend.position = "top",
panel.border = element_blank(),
text = element_text(family = "STHeiti"),
axis.text.x = element_text(angle = 30)) +
labs(x = "Date", y = "Individuals",
colour = "", shape = "")
return(plot_out)
}
Plot_ALL(shenzhen=shenzhen, wenzhou=wenzhou, wuhan=wuhan)
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Shenzhen.rda")
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
para[[1]]
para[[1000]]
para[[79]]
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
sapply(1:4000, function(k){para[[k]][[2]][2]})
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
for(city in 2:3){
region_mark <- city
source("Runing.R")
}
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
for(city in 2:3){
region_mark <- city
source("Runing.R")
}
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
for(city in 2:3){
region_mark <- city
source("Runing.R")
}
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
for(city in 2:3){
region_mark <- city
source("Runing.R")
}
para[[1]]
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wenzhou.rda")
mean(sapply(1:4000, function(k){para[[k]][[2]][2]}))
# path = '/Users/zhangjingwen//Desktop/冠状病毒/统计分析/The-simulations_1206_v2/'
path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
source(paste0(path, "Code_data/Epidemic_modeling.R"))
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen <- para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou <- para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan <- para
region_mark = 5
load(paste0(path, "Code_data/All_dat.RDATA"))
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
Rt <- function(para_t) {
sapply(1:length(para_t), function(k){
rt <- f_alp(1:time_length, para_t[[k]][[2]])
return(rt * para_t[[k]][[1]][2])
})
}
## Initial
init <- c(N, 0, dat[1,3] - dat[1,4], dat[1,4])
time_length=40
Dynamic_p <- function(time_length, para_i, alp, init, N, I_init, city){
if(city == 'wuhan') {
alp[2] = rowMeans(sapply(1:length(wuhan), function(k){wuhan[[k]][[2]]}))[2]
} else if(city == 'wenzhou') {
alp[2] = rowMeans(sapply(1:length(wenzhou), function(k){wenzhou[[k]][[2]]}))[2]
} else if(city == 'shenzhen') {
alp[2] = rowMeans(sapply(1:length(shenzhen), function(k){shenzhen[[k]][[2]]}))[2]
}
alp[3] = 1
comp_num <- matrix(init, nrow = 1)
comp_num[2] <- I_init
comp_num[1] <- N - sum(comp_num[-1])
for(i in 2:time_length){
para_i[1] <- f_alp(i-1, alp)
comp_num <- rbind(comp_num,
as.numeric(ode(y = comp_num[i-1,],
times = (i-1):(i),
eqn,
parms = para_i,
N = N,
atol = 1)[2,-1]))
}
return(comp_num)
}
pred <- function(k, time_length, para, init, N, city){
comp_num <- Dynamic_p(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]], city)
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
####---------- running
load(paste0(path, 'Code_data/Para_', region, ".rda"))
list_sta <- list()
list_end <- list()
for(city in c('wuhan', 'wenzhou', 'shenzhen')) {
list_sta[[city]] <- lapply(1:length(para), pred, para = para, time_length = 150, init = init, N = N, city = city)
pred_array <- array(0, c(length(para), time_length = 150, 4))
for(i in 1:length(para)){
pred_array[i,,] <- list_sta[[city]][[i]]
}
list_end[[city]] <- list()
list_end[[city]][['I']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,2], c(0.025, 0.5, 0.975))})
list_end[[city]][['H']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,3], c(0.025, 0.5, 0.975))})
list_end[[city]][['R']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,4], c(0.025, 0.5, 0.975))})
}
save(list_end, file = paste0(path, 'Plot/', region, "_mi.rda"), version = 2)
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wenzhou.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wuhan.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Shenzhen.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wuhan.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][4]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][3]})), c(0.025, 0.5, 0.975))
PARA[[1]]
para[[1]]
quantile((sapply(1:4000, function(k){para[[k]][[3]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[4]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[6][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[6]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][4]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][3]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[4]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[6]][1]})), c(0.025, 0.5, 0.975))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Wenzhou.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][4]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][3]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[4]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[6]][1]})), c(0.025, 0.5, 0.975))
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Shenzhen.rda")
quantile((sapply(1:4000, function(k){para[[k]][[2]][4]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[2]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[1]][3]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[3]][2]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[4]][1]})), c(0.025, 0.5, 0.975))
quantile((sapply(1:4000, function(k){para[[k]][[6]][1]})), c(0.025, 0.5, 0.975))
