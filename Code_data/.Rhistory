Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
Rt_mean
hist(rtnorm(100, 5.1, 0.0325, a = 0, b = Inf))
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 1
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy){
para <- c(1, 5.1, 5)
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
## Predict function
pred <- function(k, time_length, para, init, N){
comp_num <- Dynamic(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]])
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
Rt_mean
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 4
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy){
para <- c(1, 5.1, 5)
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
## Predict function
pred <- function(k, time_length, para, init, N){
comp_num <- Dynamic(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]])
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 4
## Data import
load("All_dat.rda")
## Data import
load("All_dat.R")
## Data import
load("All_dat.RDATA")
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Policy <- all_list[[region_mark]]$Policy
a <- all_list
a[[1]]$Policy <- c(8, 1)
a[[2]]$Policy <- c(11, 1)
a[[3]]$Policy <- c(5, 1)
a[[4]]$Policy <- c(3, 0)
a[[5]]$Policy <- c(3, 0)
a[[6]]$Policy <- c(3, 0)
all_list <- a
for(i in 1:6){
rownames(all_list[[i]][[1]]) <- NULL
names(all_list[[i]])[4] <- "Policy"
}
all_list
save(all_list, file = "All_dat.RDATA")
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 1
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy){
para <- c(1, 5.1, 5)
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
## Predict function
pred <- function(k, time_length, para, init, N){
comp_num <- Dynamic(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]])
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
Rt_mean
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 6
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy){
para <- c(1, 5.1, 5)
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
## Predict function
pred <- function(k, time_length, para, init, N){
comp_num <- Dynamic(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]])
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data")
source("Epidemic_modeling.R")
## Specify region
region_mark <- 3
source("Data_import.R")
## MCMC sampling
# Initial step
init_gene <- function(it, dat, Policy){
para <- c(1, 5.1, 5)
alp <- c(Policy[1], runif(1, 0, 14), Policy[2], runif(1, 0, 2))
dpa <- runif(2, 1, 20)
I_init <- dat[[1]][1]
return(list(para, alp, dpa, I_init, -Inf))
}
Initial_sel <- function(it){
para_init <- init_gene(it, dat, Policy)
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
}
return(para)
}
K <- 40
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "Initial_sel", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, Initial_sel)
sfStop()
# Burn-in
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
MCMC <- function(para_t, it){
para_init <- para_t[[it]]
for(h in 1:50){
para <- gibbs(para_init, init, N, time_length, dat)
cat(c(h, para[[2]], para[[4]]), "\n")
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
for(Cpu in 1:100){
sfExport("para_t")
Result <- sfLapply(1:K, MCMC, para_t = para_t)
a <- sapply(1:K, function(i){Result[[i]][[5]]})
a <- sample(1:K, replace = T, prob = exp(a - max(a)))
para_t <- lapply(a, function(i){Result[[i]]})
cat(c(max(sapply(1:K, function(i){Result[[i]][[5]]}))), "\n")
}
sfStop()
## Posterior sampling
MCMC <- function(para_t, it, G){
para <- list()
para[[1]] <- para_t[[it]]
G <- 4000 / G
for(h in 2:G){
para[[h]] <- gibbs(para[[h-1]], init, N, time_length, dat)
}
return(para)
}
sfInit(parallel = TRUE, cpus = K)
sfSource("Epidemic_modeling.R")
sfExport("init_gene", "MCMC", "region_mark")
sfSource("Data_import.R")
Result <- sfLapply(1:K, MCMC, para_t = para_t, G = K)
sfStop()
a <- 4000 / K
para <- lapply(1:(length(Result) * a), function(i){
Result[[(ceiling(i / a))]][[(i - a * (ceiling(i / a) - 1))]]
})
save(para, file =  paste0("Para_", region, ".rda"), version = 2)
## Predict function
pred <- function(k, time_length, para, init, N){
comp_num <- Dynamic(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]])
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
Result <- lapply(1:length(para), pred, para = para, time_length = time_length, init = init, N = N)
pred_array <- array(0, c(length(para), time_length, 4))
for(i in 1:length(para)){
pred_array[i,,] <- Result[[i]]
}
apply(pred_array, c(2,3), mean)
## Time-varying Reproduction number
Rt <- sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
return(rt * para[[k]][[1]][2])
})
Rt_mean <- rowMeans(Rt)
para[[1000]]
load("~/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/Para_Italy.rda")
para[[5]]
all_list
## Data import
load("All_dat.RDATA")
all_list
