}
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
plot_self <- function(result, dat_real, area = "South Korea", start_date, N) {
start_date <- as.Date(start_date)
# cum <- result$H + result$R
cum <- result$H
cum_pred <- cum[2,]
date_num <- sum(cum_pred < N * 0.1) + 1
if(date_num > ncol(result$I)) date_num <- ncol(result$I)
# dat_real <- c(dat[,3], rep(NA, date_num - nrow(dat)))
if(length(dat_real) < date_num) {
dat_real <- c(dat_real, rep(NA, date_num - length(dat_real)))
} else {
dat_real <- dat_real[1:date_num]
}
dat_I <- t(result$I)[1:date_num,]
dat_all <- t(result$H + result$R)[1:date_num,]
date_len <- date_num
# dat_E[1:7,] <- NA
time_lab <- format(seq.Date(from = start_date, by = "day", length.out = date_num), format = "%m/%d")
dat_plot <- data.frame(time_num = 1:date_len, dat_real,
dat_I, dat_all,
time_lab, stringAsFactors = FALSE)
names(dat_plot) <- c("time_num", "real_num",
"I_ci_l", "I_pred", "I_ci_h",
"all_ci_l", "all_pred", "all_ci_h",
"time_lab")
na_vec_I1 <- na_vec_I2 <-
na_vec_all1 <- na_vec_all2 <- rep(NA, date_len)
plot_out <- dat_plot %>%
ggplot(aes(x = time_num)) +
# geom_line(aes(y = I_pred, color = "Infected and infectious without isolation"), size = 1) +
geom_line(aes(y = all_pred, color = "Fitting curve"), size = 1) +
# geom_ribbon(aes(ymin = I_ci_l, ymax = I_ci_h, color = "Infected and infectious without isolation", fill = "Infected and infectious without isolation"), alpha = 0.1, linetype = 3) +
geom_ribbon(aes(ymin = all_ci_l, ymax = all_ci_h), color = "red", fill = "red", alpha = 0.1, linetype = 3)+
geom_point(aes(y = real_num, shape =  "Observed cases"), size = 2, color = "purple")
plot_out <- plot_out +
scale_color_manual(values = c("red", "#0072B2")) +
scale_fill_manual(values = c("red", "#0072B2")) +
scale_y_continuous(labels = scientific_10) +
theme_bw(base_family = "Times") +
theme(panel.grid.minor = element_blank(),
legend.position = "top",
panel.border = element_blank(),
# legend.box = "vertical",
# legend.spacing.y = unit(0.01, 'cm'),
text = element_text(family = "STHeiti"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30)) +
labs(x = "Date", y = "Number of Individuals",
title = "",
colour = "", shape = "", fill = "")
if(area == "South Korea") {
plot_out <- plot_out +
scale_x_continuous(breaks = dat_plot$time_num, labels = dat_plot$time_lab)
} else {
plot_out <- plot_out +
scale_x_continuous(breaks = dat_plot$time_num[1:length(dat_plot$time_num) %% 3 == 1],
labels = dat_plot$time_lab[1:length(dat_plot$time_num) %% 3 == 1])
}
return(plot_out)
}
load("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/All_dat.rdata")
# Korea
load("result_Korea_timeinvariant.rda")
load("Korea.true(3).rda")
N <- all_list$Korea$Population
start_date <- as.Date("2020-02-19")
dat_real <- global.K$cum_confirm[which(global.K$time == start_date):nrow(global.K)]
# dat_real <- all_list$Korea$Data[, "H"]
pic_Korea <- plot_self(time_invariant, dat_real,
area = "South Korea", start_date, N)
ggsave(pic_Korea, filename = "pic_Korea.png", width = 7.5, height = 4.5, dpi = 300)
# Italy
load("result_Italy_timeinvariant.rda")
load("Italy.true(3).rda")
N <- all_list$Italy$Population
start_date <- as.Date("2020-02-25")
dat_real <- global.I$cum_confirm[which(global.I$time == start_date):nrow(global.I)]
# dat_real <- all_list$Italy$Data[, "H"]
pic_Italy <- plot_self(time_invariant, dat_real,
area = "Italy", start_date, N)
ggsave(pic_Italy, filename = "pic_Italy.png", width = 7.5, height = 4.5, dpi = 300)
# US
load("result_America_timeinvariant.rda")
load("Unite.true(3).rda")
N <- all_list$America$Population
start_date <- as.Date("2020-03-08")
dat_real <- all_list$America$Data[, "H"]
pic_America <- plot_self(time_invariant, dat_real,
area = "the United States", start_date, N)
ggsave(pic_America, filename = "pic_America.png", width = 7.5, height = 4.5, dpi = 300)
library(ggplot2)
library(tidyverse)
# setwd("D:/SC2S2/pneumonia/paper/code/1129/")
setwd("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Plot/")
formatter <- function(x) {
if(x < 1e5) {
return(x)
}
level <- floor(log10(x))
temp <- round(x / 10^level, digits = 2)
return(paste0(temp, " %*% 10^", level))
}
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scales::scientific_format()(x)))
}
plot_self <- function(result, dat_real, area = "South Korea", start_date, N) {
start_date <- as.Date(start_date)
# cum <- result$H + result$R
cum <- result$H
cum_pred <- cum[2,]
date_num <- sum(cum_pred < N * 0.1) + 1
if(date_num > ncol(result$I)) date_num <- ncol(result$I)
# dat_real <- c(dat[,3], rep(NA, date_num - nrow(dat)))
if(length(dat_real) < date_num) {
dat_real <- c(dat_real, rep(NA, date_num - length(dat_real)))
} else {
dat_real <- dat_real[1:date_num]
}
dat_I <- t(result$I)[1:date_num,]
dat_all <- t(result$H + result$R)[1:date_num,]
date_len <- date_num
# dat_E[1:7,] <- NA
time_lab <- format(seq.Date(from = start_date, by = "day", length.out = date_num), format = "%m/%d")
dat_plot <- data.frame(time_num = 1:date_len, dat_real,
dat_I, dat_all,
time_lab, stringAsFactors = FALSE)
names(dat_plot) <- c("time_num", "real_num",
"I_ci_l", "I_pred", "I_ci_h",
"all_ci_l", "all_pred", "all_ci_h",
"time_lab")
na_vec_I1 <- na_vec_I2 <-
na_vec_all1 <- na_vec_all2 <- rep(NA, date_len)
plot_out <- dat_plot %>%
ggplot(aes(x = time_num)) +
# geom_line(aes(y = I_pred, color = "Infected and infectious without isolation"), size = 1) +
geom_line(aes(y = all_pred, color = "Fitting curve"), size = 1) +
# geom_ribbon(aes(ymin = I_ci_l, ymax = I_ci_h, color = "Infected and infectious without isolation", fill = "Infected and infectious without isolation"), alpha = 0.1, linetype = 3) +
geom_ribbon(aes(ymin = all_ci_l, ymax = all_ci_h), color = "red", fill = "red", alpha = 0.1, linetype = 3)+
geom_point(aes(y = real_num, shape =  "Observed cases"), size = 2, color = "purple")
plot_out <- plot_out +
scale_color_manual(values = c("red", "#0072B2")) +
scale_fill_manual(values = c("red", "#0072B2")) +
scale_y_continuous(labels = scientific_10) +
theme_bw(base_family = "Times") +
theme(panel.grid.minor = element_blank(),
legend.position = "top",
panel.border = element_blank(),
# legend.box = "vertical",
# legend.spacing.y = unit(0.01, 'cm'),
text = element_text(family = "STHeiti"),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30)) +
labs(x = "Date", y = "Number of Individuals",
title = "",
colour = "", shape = "", fill = "")
if(area == "South Korea") {
plot_out <- plot_out +
scale_x_continuous(breaks = dat_plot$time_num, labels = dat_plot$time_lab)
} else {
plot_out <- plot_out +
scale_x_continuous(breaks = dat_plot$time_num[1:length(dat_plot$time_num) %% 3 == 1],
labels = dat_plot$time_lab[1:length(dat_plot$time_num) %% 3 == 1])
}
return(plot_out)
}
load("D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/Code_data/All_dat.rdata")
# Korea
load("result_Korea_timeinvariant.rda")
load("Korea.true(3).rda")
N <- all_list$Korea$Population
start_date <- as.Date("2020-02-19")
dat_real <- global.K$cum_confirm[which(global.K$time == start_date):nrow(global.K)]
# dat_real <- all_list$Korea$Data[, "H"]
pic_Korea <- plot_self(time_invariant, dat_real,
area = "South Korea", start_date, N)
ggsave(pic_Korea, filename = "pic_Korea.png", width = 7.5, height = 4.5, dpi = 300)
# Italy
load("result_Italy_timeinvariant.rda")
load("Italy.true(3).rda")
N <- all_list$Italy$Population
start_date <- as.Date("2020-02-25")
dat_real <- global.I$cum_confirm[which(global.I$time == start_date):nrow(global.I)]
# dat_real <- all_list$Italy$Data[, "H"]
pic_Italy <- plot_self(time_invariant, dat_real,
area = "Italy", start_date, N)
ggsave(pic_Italy, filename = "pic_Italy.png", width = 7.5, height = 4.5, dpi = 300)
# US
load("result_America_timeinvariant.rda")
load("Unite.true(3).rda")
N <- all_list$America$Population
start_date <- as.Date("2020-03-08")
dat_real <- all_list$America$Data[, "H"]
pic_America <- plot_self(time_invariant, dat_real,
area = "the United States", start_date, N)
ggsave(pic_America, filename = "pic_America.png", width = 7.5, height = 4.5, dpi = 300)
path = '/Users/zhangjingwen//Desktop/冠状病毒/统计分析/The-simulations_1206_v2/'
#path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
source(paste0(path, "Code_data/Epidemic_modeling.R"))
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen <- para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou <- para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan <- para
region_mark = 5
load(paste0(path, "Code_data/All_dat.RDATA"))
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
Rt <- function(para_t) {
sapply(1:length(para_t), function(k){
rt <- f_alp(1:time_length, para_t[[k]][[2]])
return(rt * para_t[[k]][[1]][2])
})
}
## Initial
init <- c(N, 0, dat[1,3] - dat[1,4], dat[1,4])
time_length=40
Dynamic_p <- function(time_length, para_i, alp, init, N, I_init, city){
if(city == 'wuhan') {
alp[2] = rowMeans(sapply(1:length(wuhan), function(k){wuhan[[k]][[2]]}))[2]/
rowMeans(Rt_Wuhan(wuhan, time_length=40))[1] * rowMeans(Rt(para))[1]
} else if(city == 'wenzhou') {
alp[2] = rowMeans(sapply(1:length(wenzhou), function(k){wenzhou[[k]][[2]]}))[2]/
rowMeans(Rt(wenzhou))[1] * rowMeans(Rt(para))[1]
} else if(city == 'shenzhen') {
alp[2] = rowMeans(sapply(1:length(shenzhen), function(k){shenzhen[[k]][[2]]}))[2]/
rowMeans(Rt(shenzhen))[1] * rowMeans(Rt(para))[1]
}
alp[3] = 1
comp_num <- matrix(init, nrow = 1)
comp_num[2] <- I_init
comp_num[1] <- N - sum(comp_num[-1])
for(i in 2:time_length){
para_i[1] <- f_alp(i-1, alp)
comp_num <- rbind(comp_num,
as.numeric(ode(y = comp_num[i-1,],
times = (i-1):(i),
eqn,
parms = para_i,
N = N,
atol = 1)[2,-1]))
}
return(comp_num)
}
pred <- function(k, time_length, para, init, N, city){
comp_num <- Dynamic_p(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]], city)
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
####---------- running
load(paste0(path, 'Code_data/Para_', region, ".rda"))
list_sta <- list()
list_end <- list()
for(city in c('wuhan', 'wenzhou', 'shenzhen')) {
list_sta[[city]] <- lapply(1:length(para), pred, para = para, time_length = 150, init = init, N = N, city = city)
pred_array <- array(0, c(length(para), time_length = 150, 4))
for(i in 1:length(para)){
pred_array[i,,] <- list_sta[[city]][[i]]
}
list_end[[city]] <- list()
list_end[[city]][['I']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,2], c(0.025, 0.5, 0.975))})
list_end[[city]][['H']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,3], c(0.025, 0.5, 0.975))})
list_end[[city]][['R']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,4], c(0.025, 0.5, 0.975))})
}
path = '/Users/zhangjingwen//Desktop/冠状病毒/统计分析/The-simulations_1206_v2/'
#path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
source(paste0(path, "Code_data/Epidemic_modeling.R"))
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen <- para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou <- para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan <- para
region_mark = 5
load(paste0(path, "Code_data/All_dat.RDATA"))
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
Rt <- function(para_t) {
sapply(1:length(para_t), function(k){
rt <- f_alp(1:time_length, para_t[[k]][[2]])
return(rt * para_t[[k]][[1]][2])
})
}
## Initial
init <- c(N, 0, dat[1,3] - dat[1,4], dat[1,4])
time_length=40
Dynamic_p <- function(time_length, para_i, alp, init, N, I_init, city){
if(city == 'wuhan') {
alp[2] = rowMeans(sapply(1:length(wuhan), function(k){wuhan[[k]][[2]]}))[2]
} else if(city == 'wenzhou') {
alp[2] = rowMeans(sapply(1:length(wenzhou), function(k){wenzhou[[k]][[2]]}))[2]
} else if(city == 'shenzhen') {
alp[2] = rowMeans(sapply(1:length(shenzhen), function(k){shenzhen[[k]][[2]]}))[2]
}
alp[3] = 1
comp_num <- matrix(init, nrow = 1)
comp_num[2] <- I_init
comp_num[1] <- N - sum(comp_num[-1])
for(i in 2:time_length){
para_i[1] <- f_alp(i-1, alp)
comp_num <- rbind(comp_num,
as.numeric(ode(y = comp_num[i-1,],
times = (i-1):(i),
eqn,
parms = para_i,
N = N,
atol = 1)[2,-1]))
}
return(comp_num)
}
pred <- function(k, time_length, para, init, N, city){
comp_num <- Dynamic_p(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]], city)
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
####---------- running
load(paste0(path, 'Code_data/Para_', region, ".rda"))
list_sta <- list()
list_end <- list()
for(city in c('wuhan', 'wenzhou', 'shenzhen')) {
list_sta[[city]] <- lapply(1:length(para), pred, para = para, time_length = 150, init = init, N = N, city = city)
pred_array <- array(0, c(length(para), time_length = 150, 4))
for(i in 1:length(para)){
pred_array[i,,] <- list_sta[[city]][[i]]
}
list_end[[city]] <- list()
list_end[[city]][['I']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,2], c(0.025, 0.5, 0.975))})
list_end[[city]][['H']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,3], c(0.025, 0.5, 0.975))})
list_end[[city]][['R']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,4], c(0.025, 0.5, 0.975))})
}
save(list_end, file = paste0(path, 'Plot/', region, "_mi.rda"), version = 2)
# path = '/Users/zhangjingwen//Desktop/冠状病毒/统计分析/The-simulations_1206_v2/'
path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
source(paste0(path, "Code_data/Epidemic_modeling.R"))
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen <- para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou <- para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan <- para
region_mark = 5
load(paste0(path, "Code_data/All_dat.RDATA"))
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
Rt <- function(para_t) {
sapply(1:length(para_t), function(k){
rt <- f_alp(1:time_length, para_t[[k]][[2]])
return(rt * para_t[[k]][[1]][2])
})
}
## Initial
init <- c(N, 0, dat[1,3] - dat[1,4], dat[1,4])
time_length=40
Dynamic_p <- function(time_length, para_i, alp, init, N, I_init, city){
if(city == 'wuhan') {
alp[2] = rowMeans(sapply(1:length(wuhan), function(k){wuhan[[k]][[2]]}))[2]
} else if(city == 'wenzhou') {
alp[2] = rowMeans(sapply(1:length(wenzhou), function(k){wenzhou[[k]][[2]]}))[2]
} else if(city == 'shenzhen') {
alp[2] = rowMeans(sapply(1:length(shenzhen), function(k){shenzhen[[k]][[2]]}))[2]
}
alp[3] = 1
comp_num <- matrix(init, nrow = 1)
comp_num[2] <- I_init
comp_num[1] <- N - sum(comp_num[-1])
for(i in 2:time_length){
para_i[1] <- f_alp(i-1, alp)
comp_num <- rbind(comp_num,
as.numeric(ode(y = comp_num[i-1,],
times = (i-1):(i),
eqn,
parms = para_i,
N = N,
atol = 1)[2,-1]))
}
return(comp_num)
}
pred <- function(k, time_length, para, init, N, city){
comp_num <- Dynamic_p(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]], city)
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
####---------- running
load(paste0(path, 'Code_data/Para_', region, ".rda"))
list_sta <- list()
list_end <- list()
for(city in c('wuhan', 'wenzhou', 'shenzhen')) {
list_sta[[city]] <- lapply(1:length(para), pred, para = para, time_length = 150, init = init, N = N, city = city)
pred_array <- array(0, c(length(para), time_length = 150, 4))
for(i in 1:length(para)){
pred_array[i,,] <- list_sta[[city]][[i]]
}
list_end[[city]] <- list()
list_end[[city]][['I']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,2], c(0.025, 0.5, 0.975))})
list_end[[city]][['H']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,3], c(0.025, 0.5, 0.975))})
list_end[[city]][['R']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,4], c(0.025, 0.5, 0.975))})
}
# path = '/Users/zhangjingwen//Desktop/冠状病毒/统计分析/The-simulations_1206_v2/'
path <- "D:/Documents/GitHub/The-simulations-of-the-spread-of-COVID-19-under-different-interventions-/"
source(paste0(path, "Code_data/Epidemic_modeling.R"))
load(paste0(path, "Code_data/Para_Shenzhen.rda"))
shenzhen <- para
load(paste0(path, "Code_data/Para_Wenzhou.rda"))
wenzhou <- para
load(paste0(path, "Code_data/Para_Wuhan.rda"))
wuhan <- para
region_mark = 4
load(paste0(path, "Code_data/All_dat.RDATA"))
dat <- all_list[[region_mark]]$Data
N <- all_list[[region_mark]]$Population
region <- all_list[[region_mark]]$Region
Rt_Wuhan <- function(para, time_length = 40) {
sapply(1:length(para), function(k){
rt <- f_alp(1:time_length, para[[k]][[2]])
rt <- c(rep(para[[k]][[1]][2], 21), rep(para[[k]][[6]], time_length - 21)) * rt
return(rt)
})
}
Rt <- function(para_t) {
sapply(1:length(para_t), function(k){
rt <- f_alp(1:time_length, para_t[[k]][[2]])
return(rt * para_t[[k]][[1]][2])
})
}
## Initial
init <- c(N, 0, dat[1,3] - dat[1,4], dat[1,4])
time_length=40
Dynamic_p <- function(time_length, para_i, alp, init, N, I_init, city){
if(city == 'wuhan') {
alp[2] = rowMeans(sapply(1:length(wuhan), function(k){wuhan[[k]][[2]]}))[2]
} else if(city == 'wenzhou') {
alp[2] = rowMeans(sapply(1:length(wenzhou), function(k){wenzhou[[k]][[2]]}))[2]
} else if(city == 'shenzhen') {
alp[2] = rowMeans(sapply(1:length(shenzhen), function(k){shenzhen[[k]][[2]]}))[2]
}
alp[3] = 1
comp_num <- matrix(init, nrow = 1)
comp_num[2] <- I_init
comp_num[1] <- N - sum(comp_num[-1])
for(i in 2:time_length){
para_i[1] <- f_alp(i-1, alp)
comp_num <- rbind(comp_num,
as.numeric(ode(y = comp_num[i-1,],
times = (i-1):(i),
eqn,
parms = para_i,
N = N,
atol = 1)[2,-1]))
}
return(comp_num)
}
pred <- function(k, time_length, para, init, N, city){
comp_num <- Dynamic_p(time_length, para[[k]][[1]], para[[k]][[2]], init, N, para[[k]][[4]], city)
colnames(comp_num) <- c("S", "I", "H", "R")
return(comp_num)
}
####---------- running
load(paste0(path, 'Code_data/Para_', region, ".rda"))
list_sta <- list()
list_end <- list()
for(city in c('wuhan', 'wenzhou', 'shenzhen')) {
list_sta[[city]] <- lapply(1:length(para), pred, para = para, time_length = 150, init = init, N = N, city = city)
pred_array <- array(0, c(length(para), time_length = 150, 4))
for(i in 1:length(para)){
pred_array[i,,] <- list_sta[[city]][[i]]
}
list_end[[city]] <- list()
list_end[[city]][['I']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,2], c(0.025, 0.5, 0.975))})
list_end[[city]][['H']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,3], c(0.025, 0.5, 0.975))})
list_end[[city]][['R']] <- sapply(1:150, function(j)
{quantile(pred_array[,j,4], c(0.025, 0.5, 0.975))})
}
save(list_end, file = paste0(path, 'Plot/', region, "_mi.rda"), version = 2)
